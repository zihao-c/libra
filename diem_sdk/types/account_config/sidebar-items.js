initSidebarItems({"constant":[["ACCOUNT_MODULE_NAME","The name of the Account module."],["CORE_CODE_ADDRESS",""],["DIEM_MODULE_NAME",""],["XDX_NAME",""],["XUS_NAME",""]],"enum":[["AccountRole","A enum that captures the collection of role-specific resources stored under each account type"],["DesignatedDealerPreburns",""]],"fn":[["allowed_currency_code_string","In addition to the constraints for valid Move identifiers, currency codes should consist entirely of uppercase alphanumeric characters (e.g., no underscores)."],["coin_name","Return `Some(struct_name)` if `t` is a `StructTag` representing one of the current Diem coin types (XDX, XUS), `None` otherwise."],["diem_root_address",""],["event_handle_generator_struct_name",""],["event_handle_generator_struct_tag",""],["event_handle_struct_name",""],["event_module_name",""],["from_currency_code_string",""],["reserved_vm_address",""],["testnet_dd_account_address",""],["treasury_compliance_account_address",""],["type_tag_for_currency_code",""],["validator_set_address",""],["xdx_type_tag",""],["xus_tag",""]],"mod":[["constants",""],["events",""],["resources",""]],"static":[["ACCOUNT_MODULE","The ModuleId for the Account module."],["ACCOUNT_MODULE_IDENTIFIER","The Identifier for the Account module."],["ACCOUNT_RECEIVED_EVENT_PATH","Returns the path to the received event counter for an Account resource. It can be used to query the event DB for the given event."],["ACCOUNT_SENT_EVENT_PATH","The path to the sent event counter for an Account resource. It can be used to query the event DB for the given event."],["COIN_MODULE",""],["EVENT_MODULE",""],["XDX_MODULE",""],["XDX_STRUCT_NAME",""]],"struct":[["AccountResource","A Rust representation of an Account resource. This is not how the Account is represented in the VM but it's a convenient representation."],["AdminTransactionEvent","Struct that represents a AdminEvent."],["BalanceResource","The balance resource held under an account."],["BaseUrlRotationEvent","Struct that represents a BaseUrlRotationEvent."],["BurnEvent","Struct that represents a BurnEvent."],["CancelBurnEvent","Struct that represents a CancelBurnEvent."],["ChainIdResource",""],["ChildVASP",""],["ComplianceKeyRotationEvent","Struct that represents a ComplianceKeyRotationEvent."],["CreateAccountEvent",""],["Credential",""],["CurrencyInfoResource","Struct that represents a CurrencyInfo resource"],["DesignatedDealer",""],["FreezingBit",""],["KeyRotationCapabilityResource",""],["Limit","Defines the dual attest limit in microDiem XDX"],["MintEvent","Struct that represents a MintEvent."],["NewBlockEvent","Struct that represents a NewBlockEvent."],["NewEpochEvent","Struct that represents a NewEpochEvent."],["ParentVASP",""],["PreburnEvent","Struct that represents a PreburnEvent."],["PreburnQueueResource","The preburn balance held under an account."],["PreburnResource","The preburn balance held under an account."],["ReceivedMintEvent","Struct that represents a ReceivedMintEvent."],["ReceivedPaymentEvent","Struct that represents a ReceivedPaymentEvent."],["RoleId",""],["SentPaymentEvent","Struct that represents a SentPaymentEvent."],["ToXDXExchangeRateUpdateEvent","Struct that represents a ToXDXExchangeRateUpdateEvent"],["WithdrawCapabilityResource",""]]});